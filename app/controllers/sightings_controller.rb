class SightingsController < ApplicationController


  def show
  sighting = Sighting.find_by(id: params[:id])
  options = {
    include: [:bird, :location]
  }
  render json: SightingSerializer.new(sighting, options)
end
end






#   def show
#     sighting = Sighting.find(params[:id])
#     render json: SightingSerializer.new(sighting)
#   end
# end



#   def show
#     @sighting = Sighting.find(params[:id])
#     render json: @sighting.to_json(:include => {:bird => {:only =>[:name, :species]}, :location => {:only =>[:latitude, :longitude]}}, :except => [:updated_at])
#   end
# end

# Serializers generated by the Fast JSON API gem have two built-in methods called 
# serializable_hash and serialized_json which return a serialized hash and a JSON 
# string respectively. However, we don't actually need either of these in this example,
#  as to_json will still be called on SightingSerializer.new(sighting) implicitly. 
#  As we will see, once our serializers are configured and initialized, we will not need
# to do any additional work